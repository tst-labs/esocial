#Web
server.servlet.contextPath=/esocial-jt-service

#eSocial-JT
esocialjt.cnpj-empregador=00509968000148
esocialjt.ambiente=PRODUCAO_RESTRITA
esocialjt.arquivoCertificado=
esocialjt.tipoCertificado=pkcs12
esocialjt.aliasCertificado=
esocialjt.senhaCertificado=
esocialjt.arquivoCacerts=
esocialjt.senhaCacerts=changeit
esocialjt.periodoAutoMilis=10000
esocialjt.versao-esquemas-esocial="S-1.3"
esocialjt.limite-eventos-por-lote=50
esocialjt.regra-empregador-cadastrado.habilitado=true

#Preencha caso queira usar servicos externos, assim nao ha necessidade de ter um certificado local
#Uma instalacao padrao fornece os servicos nos endpoints abaixo (aponte, por exemplo, para uma instalacao em homologacao)
#esocialjt.urlServicoConsultaProcessamento=http://localhost:8080/esocial-jt-service/lote/consulta/
#esocialjt.urlServicoEnvioLote=http://localhost:8080/esocial-jt-service/lote/acoes/enviar/
#esocialjt.urlServicoAssinatura=http://localhost:8080/esocial-jt-service/xml/acoes/assinar/

#Preencha caso o certificado do transmissor seja diferente do empregador a ser cadastrado no evento S1000.
#Ou seja, sera usado um certificado de uma Pessoa Fisica para envio dos eventos.
#esocialjt.tpInscIdeTransmissor=2
#esocialjt.nrInscIdeTransmissor= cpf do transmissor

#Database
spring.datasource.url=jdbc:postgresql://localhost/postgres
spring.datasource.username=postgres
spring.datasource.password=esocial
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.open-in-view=false

#Flyway - criacao automatica dos esquemas de banco de dados
spring.flyway.enabled=true

#Management
management.endpoints.web.exposure.include=info, health, esocialhealth
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=*

#Kafka
#Preencha o valor abaixo como true caso queira receber ocorrencias via Kafka
kafka.autostart=false
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.properties.reconnect.backoff.ms=30000
spring.kafka.properties.reconnect.backoff.max.ms=360000
spring.kafka.producer.value-serializer=br.jus.tst.esocialjt.util.KafkaSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false
spring.kafka.consumer.group-id=esocial-jt-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=10
esocial-jt-ocorrencia-topic=esocial-jt-ocorrencia
esocial-jt-ocorrencia-resp-topic=esocial-jt-ocorrencia-resp
esocial-jt-ocorrencia-atualizacao-topic=esocial-jt-ocorrencia-atualizacao
spring.jackson.serialization.fail-on-empty-beans=false

#Keycloak
#Preencha os valores abaixo para habilitar seguranca com autenticacao via keycloak
keycloak.enabled=false
#esocialjt.security.role=
#keycloak.enabled=true
#keycloak.auth-server-url=http://localhost:9090/auth
#keycloak.realm=
#keycloak.resource=
#keycloak.bearer-only=true
#keycloak.ssl-required=external
#keycloak.confidential-port=0