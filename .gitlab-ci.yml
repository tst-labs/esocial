# =================================================================================================
# Variáveis globais da pipeline.
# =================================================================================================
variables:
  SONAR_HOST: https://sonar.tjdft.jus.br
  OPENSHIFT_URL_STAGE: https://api.ocp4bm2.tjdft.jus.br:6443
  OPENSHIFT_URL_PRODUCTION: https://api.ocp4bm1.tjdft.jus.br:6443
  IMAGE_PATH: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME  
  HELM_CHART_DIR: .helm

# =================================================================================================
# Fases da pipeline.
# =================================================================================================
stages:
  - package
  - build
  - deploy

# =================================================================================================
# Templates
# =================================================================================================
.default_rules:
  rules:
    # Regra para quando gera tag para stage oficial
    - if: '$CI_COMMIT_TAG =~ /^stage-.*$/'
      variables:
        ENVIRONMENT: "stage"
        OPENSHIFT_URL: "${OPENSHIFT_URL_STAGE}"
        OPENSHIFT_TOKEN: "${OPENSHIFT_TOKEN_STAGE}"
        HELM_CHART_NAME: "esocialjt"
      when: always
    # Regra para quando gera tag para stage de testes
    - if: '$CI_COMMIT_TAG =~ /^testes-.*$/'
      variables:
        ENVIRONMENT: "testes"
        OPENSHIFT_URL: "${OPENSHIFT_URL_STAGE}"
        OPENSHIFT_TOKEN: "${OPENSHIFT_TOKEN_STAGE_TESTES}"
        HELM_CHART_NAME: "esocialjttestes"
      when: always
    # Regra para quando gera tag para produção
    - if: $CI_COMMIT_TAG =~ /^production-.*$/
      variables:
        ENVIRONMENT: "production"
        OPENSHIFT_URL: "${OPENSHIFT_URL_PRODUCTION}"
        OPENSHIFT_TOKEN: "${OPENSHIFT_TOKEN_PRODUCTION}"
        HELM_CHART_NAME: "esocialjt"
      when: always

.template_build:
  image: kaniko-project/executor:debug
  stage: deploy
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CONTEXT_DIR}"
      --dockerfile "${DOCKERFILE_DIR}"
      --build-arg "release='${CI_COMMIT_SHA}'"
      --destination "${DESTINATION}"

# =================================================================================================
# Package artefatos do backend
# =================================================================================================
package_backend:
  image: adoptopenjdk/maven-openjdk8
  stage: package
  extends: .default_rules
  script:
    - cd src/
    - mvn -B verify
  artifacts:
    when: on_success
    paths:
      - ${CI_PROJECT_DIR}/src/esocial-jt-service/target
    expire_in: 1 day

# =================================================================================================
# Package artefatos do frontend
# =================================================================================================
package_frontend:
  image: ${CI_TEMPLATE_REGISTRY_HOST}node:16-bullseye
  stage: package
  extends: .default_rules
  script:
    - cd frontend/
    - yarn install --frozen-lockfile
    - yarn lint
    - yarn test
    - yarn build
  artifacts:
    when: on_success
    paths:
      - frontend/build
    expire_in: 1 day

# =================================================================================================
# Build da imagem docker do backend
# =================================================================================================
build_backend_image:
  stage: build
  image: kaniko-project/executor:debug
  extends: 
    - .default_rules
    - .template_build
  variables:
    CONTEXT_DIR: ${CI_PROJECT_DIR}/src
    DOCKERFILE_DIR: ${CI_PROJECT_DIR}/src/Dockerfile
    DESTINATION: ${IMAGE_PATH}/backend:${ENVIRONMENT}
  needs:
    - package_backend

# =================================================================================================
# Build da imagem docker do frontend
# =================================================================================================
build_frontend_image:
  stage: build
  image: kaniko-project/executor:debug
  extends: 
    - .default_rules
    - .template_build
  variables:
    CONTEXT_DIR: ${CI_PROJECT_DIR}/frontend
    DOCKERFILE_DIR: ${CI_PROJECT_DIR}/frontend/Dockerfile
    DESTINATION: ${IMAGE_PATH}/frontend:${ENVIRONMENT}
  needs:
    - package_frontend

# =================================================================================================
# Deploy no Openshift via Helm
# =================================================================================================
deploy:
  stage: deploy
  image: ${CI_REGISTRY}/docker-images/helm:4.4.0
  extends: .default_rules
  needs:
    - build_backend_image
    - build_frontend_image
  script:
    - echo "Deploying to ${ENVIRONMENT}"
    - echo "URL ${OPENSHIFT_URL}"
    
    # Login no OpenShift
    - oc login --server="${OPENSHIFT_URL}" --token="${OPENSHIFT_TOKEN}" --insecure-skip-tls-verify=true

    # Cria um secret no Openshift para acessar o registry do GitLab
    - oc create secret docker-registry gitlab-registry-secret --docker-server=${CI_REGISTRY} --docker-username="${CI_DEPLOY_USER}" --docker-password="${CI_DEPLOY_PASSWORD}" --dry-run=client -o yaml | oc apply -f -

    # Descriptografa `secrets` e injeta-o no contexto para ser utilizado no template
    # Instala/atualiza Helm chart no Openshift
    - SOPS_AGE_KEY=${SOPS_AGE_KEY} sops -d .helm/secrets.${ENVIRONMENT}.yaml | helm upgrade --install $HELM_CHART_NAME ${HELM_CHART_DIR} -f ${HELM_CHART_DIR}/values.${ENVIRONMENT}.yaml --values - --set commitHash=${CI_COMMIT_SHA}
